MATERIAL DESIGN:
Compose is built to support Material Design 
principles. Many of its UI elements implement
 Material Design out of the box. In this lesson, 
you'll style your app with Material Design widgets.


Jetpack Compose provides an implementation of Material
 Design and its UI elements out of the box. You'll 
improve the appearance of our MessageCard composable 
using Material Design styling.
To start, wrap the MessageCard function with the Material
 theme created in your project, ComposeTutorialTheme, as well 
as a Surface. Do it both in the @Preview and in the setContent 
function. Doing so will allow your composables to inherit 
styles as defined in your app's theme ensuring consistency
 across your app.

Material Design is built around three pillars: Color, Typography, 
and Shape. You will add them one by one.
class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            ComposeTutorialTheme {
                Surface(modifier = Modifier.fillMaxSize()) {
                    MessageCard(Message("Android", "Jetpack Compose"))
                }
            }
        }
    }
}

@Preview
@Composable
fun PreviewMessageCard() {
    ComposeTutorialTheme {
        Surface {
            MessageCard(
                msg = Message("Colleague", "Take a look at Jetpack Compose, it's great!")
            )
        }
    }
}

**Color
Use MaterialTheme.colors to style with colors from the wrapped theme. You can use these values from the theme anywhere a color is needed.

Style the title and add a border to the image.
@Composable
fun MessageCard(msg: Message) {
   Row(modifier = Modifier.padding(all = 8.dp)) {
       Image(
           painter = painterResource(R.drawable.profile_picture),
           contentDescription = null,
           modifier = Modifier
             .size(40.dp)
             .clip(CircleShape)
             .border(1.5.dp, MaterialTheme.colors.secondary, CircleShape)
       )
       Spacer(modifier = Modifier.width(8.dp))
       Column {
           Text(
               text = msg.author,
               color = MaterialTheme.colors.secondaryVariant
           )
           Spacer(modifier = Modifier.height(4.dp))
           Text(text = msg.body)
       }
   }
}

Typography
Material Typography styles are available in the MaterialTheme, 
just add them to the Text composables.
@Composable
fun MessageCard(msg: Message) {
   Row(modifier = Modifier.padding(all = 8.dp)) {
       Image(
           painter = painterResource(R.drawable.profile_picture),
           contentDescription = null,
           modifier = Modifier
               .size(40.dp)
               .clip(CircleShape)
               .border(1.5.dp, MaterialTheme.colors.secondary, CircleShape)
       )
       Spacer(modifier = Modifier.width(8.dp))

       Column {
           Text(
               text = msg.author,
               color = MaterialTheme.colors.secondaryVariant,
               style = MaterialTheme.typography.subtitle2
           )

           Spacer(modifier = Modifier.height(4.dp))

           Text(
               text = msg.body,
               style = MaterialTheme.typography.body2
           )
       }
   }
}

Shape
With Shapeyou can add the final touches. First, wrap the message body text around a
 Surface composable. Doing so allows customizing the message body's shape and elevation.
 Padding is also added to the message for a better layout.

@Composable
fun MessageCard(msg: Message) {
   Row(modifier = Modifier.padding(all = 8.dp)) {
       Image(
           painter = painterResource(R.drawable.profile_picture),
           contentDescription = null,
           modifier = Modifier
               .size(40.dp)
               .clip(CircleShape)
               .border(1.5.dp, MaterialTheme.colors.secondary, CircleShape)
       )
       Spacer(modifier = Modifier.width(8.dp))

       Column {
           Text(
               text = msg.author,
               color = MaterialTheme.colors.secondaryVariant,
               style = MaterialTheme.typography.subtitle2
           )

           Spacer(modifier = Modifier.height(4.dp))

           Surface(shape = MaterialTheme.shapes.medium, elevation = 1.dp) {
               Text(
                   text = msg.body,
                   modifier = Modifier.padding(all = 4.dp),
                   style = MaterialTheme.typography.body2
               )
           }
       }
   }
}

** Thanks to the Material Design support, Jetpack Compose can handle the dark theme by default.
 Having used Material Design colors, text and backgrounds will automatically adapt to the dark background.
*Color choices for the light and dark themes are defined in the IDE-generated Theme.kt file.

@Preview(name = "Light Mode")
@Preview(
    uiMode = Configuration.UI_MODE_NIGHT_YES,
    showBackground = true,
    name = "Dark Mode"
)